Microservice Communications (go modules edition)
Comparing Go net/rpc, message bus, REST and gRPC
12 Sep 2018

Loh Siu Yin
Technology Consultant, Beyond Broadcast LLP
siuyin@beyondbroadcast.com

* Go Modules
- feature introduced as experimental in go 1.11
- GO111MODULE environment variable is a switch (default = auto, on, off)
- if code is in $GOPATH/src go modules is off, GO111MODULE=on to force on.

* go.mod
Create a go.mod file and give your module a name eg. present-microsvc_comms
or better github.com/siuyin/present-microsvc_comms

go.mod:

  module github.com/siuyin/present-microsvc_comms


* Monolith
- Program implemented within a single process

.play -edit mono/main.go

- Nothing wrong with monoliths. However to update anything, you have to shutdown the entire system / program.

* Remote Procedure Call


* net/rpc from Go standard library
- First define a package to hold type and service definitions
- I have chosen the package name nrpc. It is in sub-folder nrpc.

.code nrpc/nrpc.go

* Server
- My nrpc package is accessed as "github.com/siuyin/present-microsvc_comms/nrpc" 
- The server imports the nrpc package
- Implements Arith.Sum service

file: nrpc/server/main.go

.code nrpc/server/main.go /004 O/,/005 O/

* server main()

.code nrpc/server/main.go /010/,/020/

- Let's run the server.

  go run nrpc/server/main.go

* Client
- The client also imports the nrpc package
- Calls the service

.code nrpc/client/main.go /010/,/020/

* client run

  go run nrpc/client/main.go

* What was gained in creating the Arith service?
- Well defined responsibilities: Client responsible for UI and Server for computation.
- Servers can be updated without changing Client code and vice-versa.

We have well defined separation of concerns.

---

- One Server can serve many clients (when jobs are CPU light).
- Many Servers can be deployed to serve clients (when jobs are CPU heavy eg. video encoding)
We gain independent scalability.


* The costs are:

- additional complexity
- network latency
- multiple servers must be served behind a load balancer
- with go net/rpc both Server and Client must be written in Go (gob serialization)
- Servers and Clients are tightly coupled via RPC


* Message Bus


* Message Bus: Concept
- Clients send messages to a message bus
- Servers listen for relevant messages on message bus subjects or topics
- Servers reply with answers to the message bus
- Clients pickup replies from the message bus

* Start a message bus
- I will use the NATS message bus 
- Download and install the gnatsd binary to a folder on your path
.link http://nats.io/

run nats server:

  ~/go/bin/gnatsd

* Define message types and message bus subjects / topics
- Package mbus accessible as "github.com/siuyin/present-microsvc_comms/mbus"

.code mbus/mbus.go


* Server main()

.code  mbus/server/main.go /010/,/020/


* Some NATS detail
.code mbus/server/main.go /030/,/040/

- with the NATS (json) encoded connection
- subscribe to the mbus.ArithSum subject
- handle messages with the function that receives as parameters
- subj -- the NATS subject
- reply -- the NATS topic (subject) to send replies to
- args -- input arguments

Let's run the server:

  go run mbus/server/main.go

* Client

.code mbus/client/main.go /010/,/020/

* Running the client

  go run mbus/client/main.go

* Message bus vs go net/rpc
- NATS allows any encoding: JSON, gob, protocol buffers etc. JSON and gob are built-in.
- NATS RequestWithContext allows for explicit cancellation or timeouts.
- Message bus servers and clients can be written in different languages (eg. go and python)
- Message bus components can be type safe if type definition file is used (eg. mbus package)
- However mbus package is specific to go. It has to be manually ported to other languages.
- Message bus components need not use shared type definition file, type safety is lost but flexibility gained.
- Message bus allows Pub/Sub. RPC does not.

Hence message bus components *can* be less tightly coupled than RPC.
Allows for faster development at the cost of type safety and bugs.


* REST (REpresentational State Transfer)

* Well not REST but http/json

- REST is based on the idea of a resource that behaves in predictable ways.
- eg. if _user_ is a resource
- you can GET user _id_
- or PUT user _id_ to update that user, etc.

---

What I  describe next is http/json
where I perform RPC over http as a transport mechanism and
use json as the message encoding.

* Server
- The heart of the server is *sumStr*

.play rest/server/main.go /010/,/020/

- Let's see what *sumStr* does.

* Proceesing query parameters
.code rest/server/main.go /030/,/040/

Now run the REST server (back one screen / run).


* Client
- Here we URL encode our parameters

.play -edit rest/client/main.go /010/,/020/

* Message bus vs http/json
- NATS message bus is lighter-weight than http/json
- ZeroMQ (1 million messages / sec), NATS (100,000 m/s), REST (10,000 m/s)
- Message bus service args are directly (JSON/GOB) encoded rather than URL encoded (parsing overhead)
- In both cases the encoding (JSON, GOB or URL) is not standardized and is up to the user to choose. This can lead to compatibility issues as the system grows.
- Message bus requires a message broker (NATS) or library (ZeroMQ, akka etc). 
- http/json servers may often use embedded http server.


* gRPC

* Why use gRPC?
- Supports many languages, Go, Ruby, Java, Python, C#, C++ etc.
- Generates stubs in the above languages from a .proto interface definition file.
- Uses binary protocol buffer serialization over http/2 transport for efficiency
- Supports bi-directional streaming over one multiplexed connection
- golang context support allows for explicit cancellation and/or timeouts

* gRPC setup on development workstation
- change directory to your module root (to allow go.mod to track dependencies)
- go get google.golang.org/grpc
- download and install *protoc* from https://github.com/google/protobuf/releases
- go get github.com/golang/protobuf/protoc-gen-go

* Interface definition (.proto) file 
.code grpc/arith/arith.proto

- = 1, = 2 are index tags

* Generate Go stubs for client and server
.play grpc/gen_stubs.sh

---

- As previously mentioned, this single .proto file can generate stubs for multiple languages, Go, Python, C#, java ...
- Change --go_out to --java_out etc.
* Generated Go stub: types
.code grpc/arith/arith.pb.go /type SumArgs/,/\}/
.code grpc/arith/arith.pb.go /type SumReply/,/\}/

* Go stub: server API
.code grpc/arith/arith.pb.go /type ArithServer/,/\}/
.code grpc/arith/arith.pb.go /RegisterArithServer/,/\}/

* Go stub: client API
.code grpc/arith/arith.pb.go /type ArithClient/,/\}/
.code grpc/arith/arith.pb.go /NewArithClient/,/\}/
.code grpc/arith/arith.pb.go /\*arithClient\) Sum/,/^\}$/

* Server Implementation (1)
.code grpc/server/main.go /010/,/020/

- The go:generate directive allows you to generate grpc/arith/arith.pb.go with the command "go generate grpc/server/main.go"

* Server Implementation (2)
.code grpc/server/main.go /030/,/040/

- The above is mostly standard boiler-plate code. Just update with the appropriate server name (i.e. RegisterArithServer)
- Let's run the gRPC server.

  go run grpc/server/main.go

* Client Implementation
.code grpc/client/main.go /010/,/020/

* Running the gRPC client

  go run grpc/client/main.go

* What have we gained from gRPC?
- .proto file defined a strict contract between client and server
- message encoding handled for you (protocol buffers by default)
- polyglot capable (server in go, client in python etc.)

Cons:

- must learn the .proto IDL (Interface Definition Language)
- requires protoc and appropritate language plugins to generate stubs (not go gettable)

* gRPC vs go net/rpc

Use gRPC:

- your system is polyglot
- you need middleware (gRPC interceptors)

---

Use go net/rpc:

- if your system is entirely in go 
- you do not need the features of gRPC

* code and presentation download

.link https://github.com/siuyin/present-microsvc_comms

