// Code generated by protoc-gen-go. DO NOT EDIT.
// source: arith.proto

/*
Package arith is a generated protocol buffer package.

It is generated from these files:
	arith.proto

It has these top-level messages:
	SumArgs
	SumReply
*/
package arith

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the Sum's Args
type SumArgs struct {
	A int32 `protobuf:"varint,1,opt,name=a" json:"a,omitempty"`
	B int32 `protobuf:"varint,2,opt,name=b" json:"b,omitempty"`
}

func (m *SumArgs) Reset()                    { *m = SumArgs{} }
func (m *SumArgs) String() string            { return proto.CompactTextString(m) }
func (*SumArgs) ProtoMessage()               {}
func (*SumArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SumArgs) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *SumArgs) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

// The response message containing the SumReply
type SumReply struct {
	Reply int32 `protobuf:"varint,1,opt,name=reply" json:"reply,omitempty"`
}

func (m *SumReply) Reset()                    { *m = SumReply{} }
func (m *SumReply) String() string            { return proto.CompactTextString(m) }
func (*SumReply) ProtoMessage()               {}
func (*SumReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SumReply) GetReply() int32 {
	if m != nil {
		return m.Reply
	}
	return 0
}

func init() {
	proto.RegisterType((*SumArgs)(nil), "arith.SumArgs")
	proto.RegisterType((*SumReply)(nil), "arith.SumReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Arith service

type ArithClient interface {
	//  Sum sums two integers
	Sum(ctx context.Context, in *SumArgs, opts ...grpc.CallOption) (*SumReply, error)
}

type arithClient struct {
	cc *grpc.ClientConn
}

func NewArithClient(cc *grpc.ClientConn) ArithClient {
	return &arithClient{cc}
}

func (c *arithClient) Sum(ctx context.Context, in *SumArgs, opts ...grpc.CallOption) (*SumReply, error) {
	out := new(SumReply)
	err := grpc.Invoke(ctx, "/arith.Arith/Sum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Arith service

type ArithServer interface {
	//  Sum sums two integers
	Sum(context.Context, *SumArgs) (*SumReply, error)
}

func RegisterArithServer(s *grpc.Server, srv ArithServer) {
	s.RegisterService(&_Arith_serviceDesc, srv)
}

func _Arith_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arith.Arith/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithServer).Sum(ctx, req.(*SumArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Arith_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arith.Arith",
	HandlerType: (*ArithServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _Arith_Sum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arith.proto",
}

func init() { proto.RegisterFile("arith.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2c, 0xca, 0x2c,
	0xc9, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x54, 0xb9, 0xd8, 0x83,
	0x4b, 0x73, 0x1d, 0x8b, 0xd2, 0x8b, 0x85, 0x78, 0xb8, 0x18, 0x13, 0x25, 0x18, 0x15, 0x18, 0x35,
	0x58, 0x83, 0x18, 0x13, 0x41, 0xbc, 0x24, 0x09, 0x26, 0x08, 0x2f, 0x49, 0x49, 0x81, 0x8b, 0x23,
	0xb8, 0x34, 0x37, 0x28, 0xb5, 0x20, 0xa7, 0x52, 0x48, 0x84, 0x8b, 0xb5, 0x08, 0xc4, 0x80, 0xaa,
	0x85, 0x70, 0x8c, 0x0c, 0xb9, 0x58, 0x1d, 0x41, 0x26, 0x0a, 0x69, 0x70, 0x31, 0x07, 0x97, 0xe6,
	0x0a, 0xf1, 0xe9, 0x41, 0x6c, 0x83, 0x9a, 0x2e, 0xc5, 0x8f, 0xe0, 0x83, 0x8d, 0x51, 0x62, 0x48,
	0x62, 0x03, 0xbb, 0xc4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x94, 0xfe, 0x2c, 0xc4, 0x98, 0x00,
	0x00, 0x00,
}
